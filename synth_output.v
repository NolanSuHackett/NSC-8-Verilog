/* Generated by Yosys 0.51 (git sha1 c4b5190229616f7ebf8197f43990b4429de3e420, x86_64-w64-mingw32-g++ 15.1.0 -march=nocona -msahf -mtune=generic -O2 -fstack-protector-strong -O3) */

(* keep =  1  *)
(* dynports =  1  *)
(* hdlname = "ram" *)
(* src = "Source/ram.v:1.1-35.10" *)
module \$paramod$5c5748fb6a4b04a20c8df86f548186a89ec62988\ram (clk, memory_address, data_in, store, output_enable_ram, data_out);
  (* src = "Source/ram.v:29.1-34.4" *)
  wire [3:0] _000_;
  (* src = "Source/ram.v:29.1-34.4" *)
  wire [7:0] _001_;
  (* src = "Source/ram.v:29.1-34.4" *)
  wire [7:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  (* src = "Source/ram.v:0.0-0.0" *)
  wire [7:0] _031_;
  wire [7:0] _032_;
  wire [7:0] _033_;
  wire [7:0] _034_;
  wire [7:0] _035_;
  wire [7:0] _036_;
  wire [7:0] _037_;
  wire [7:0] _038_;
  wire [7:0] _039_;
  wire [7:0] _040_;
  wire [7:0] _041_;
  wire [7:0] _042_;
  wire [7:0] _043_;
  wire [7:0] _044_;
  wire [7:0] _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  (* src = "Source/ram.v:5.16-5.19" *)
  input clk;
  wire clk;
  (* src = "Source/ram.v:7.24-7.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/ram.v:10.25-10.33" *)
  output [7:0] data_out;
  wire [7:0] data_out;
  (* src = "Source/ram.v:6.26-6.40" *)
  input [3:0] memory_address;
  wire [3:0] memory_address;
  (* src = "Source/ram.v:9.16-9.33" *)
  input output_enable_ram;
  wire output_enable_ram;
  reg [7:0] \ram_array[0]  = 8'h34;
  reg [7:0] \ram_array[10]  = 8'hec;
  reg [7:0] \ram_array[11]  = 8'hfc;
  reg [7:0] \ram_array[12]  = 8'h00;
  reg [7:0] \ram_array[13]  = 8'h00;
  reg [7:0] \ram_array[14]  = 8'h00;
  reg [7:0] \ram_array[15]  = 8'h00;
  reg [7:0] \ram_array[1]  = 8'h52;
  reg [7:0] \ram_array[2]  = 8'h51;
  reg [7:0] \ram_array[3]  = 8'h62;
  reg [7:0] \ram_array[4]  = 8'h79;
  reg [7:0] \ram_array[5]  = 8'h00;
  reg [7:0] \ram_array[6]  = 8'h00;
  reg [7:0] \ram_array[7]  = 8'h00;
  reg [7:0] \ram_array[8]  = 8'h00;
  reg [7:0] \ram_array[9]  = 8'h4f;
  (* src = "Source/ram.v:8.16-8.21" *)
  input store;
  wire store;
  always @(posedge clk)
    if (_061_) \ram_array[9]  <= _001_;
  always @(posedge clk)
    if (_060_) \ram_array[8]  <= _001_;
  always @(posedge clk)
    if (_059_) \ram_array[7]  <= _001_;
  always @(posedge clk)
    if (_058_) \ram_array[6]  <= _001_;
  always @(posedge clk)
    if (_057_) \ram_array[5]  <= _001_;
  always @(posedge clk)
    if (_056_) \ram_array[4]  <= _001_;
  always @(posedge clk)
    if (_055_) \ram_array[3]  <= _001_;
  always @(posedge clk)
    if (_054_) \ram_array[2]  <= _001_;
  always @(posedge clk)
    if (_053_) \ram_array[1]  <= _001_;
  always @(posedge clk)
    if (_052_) \ram_array[15]  <= _001_;
  always @(posedge clk)
    if (_051_) \ram_array[14]  <= _001_;
  always @(posedge clk)
    if (_050_) \ram_array[13]  <= _001_;
  always @(posedge clk)
    if (_049_) \ram_array[12]  <= _001_;
  always @(posedge clk)
    if (_048_) \ram_array[11]  <= _001_;
  always @(posedge clk)
    if (_047_) \ram_array[10]  <= _001_;
  always @(posedge clk)
    if (_046_) \ram_array[0]  <= _001_;
  assign _027_ = ~ _000_[0];
  assign _028_ = ~ _000_[1];
  assign _029_ = ~ _000_[2];
  assign _030_ = ~ _000_[3];
  assign _003_ = _027_ & _028_;
  assign _004_ = _029_ & _030_;
  assign _005_ = _003_ & _004_;
  assign _006_ = _000_[0] & _028_;
  assign _007_ = _006_ & _004_;
  assign _008_ = _027_ & _000_[1];
  assign _009_ = _008_ & _004_;
  assign _010_ = _000_[0] & _000_[1];
  assign _011_ = _010_ & _004_;
  assign _012_ = _000_[2] & _030_;
  assign _013_ = _003_ & _012_;
  assign _014_ = _006_ & _012_;
  assign _015_ = _008_ & _012_;
  assign _016_ = _010_ & _012_;
  assign _017_ = _029_ & _000_[3];
  assign _018_ = _003_ & _017_;
  assign _019_ = _006_ & _017_;
  assign _020_ = _008_ & _017_;
  assign _021_ = _010_ & _017_;
  assign _022_ = _000_[2] & _000_[3];
  assign _023_ = _003_ & _022_;
  assign _024_ = _006_ & _022_;
  assign _025_ = _008_ & _022_;
  assign _026_ = _010_ & _022_;
  assign _031_ = memory_address[3] ? _033_ : _032_;
  assign _032_ = memory_address[2] ? _035_ : _034_;
  assign _033_ = memory_address[2] ? _037_ : _036_;
  assign _034_ = memory_address[1] ? _039_ : _038_;
  assign _035_ = memory_address[1] ? _041_ : _040_;
  assign _036_ = memory_address[1] ? _043_ : _042_;
  assign _037_ = memory_address[1] ? _045_ : _044_;
  assign _038_ = memory_address[0] ? \ram_array[1]  : \ram_array[0] ;
  assign _039_ = memory_address[0] ? \ram_array[3]  : \ram_array[2] ;
  assign _040_ = memory_address[0] ? \ram_array[5]  : \ram_array[4] ;
  assign _041_ = memory_address[0] ? \ram_array[7]  : \ram_array[6] ;
  assign _042_ = memory_address[0] ? \ram_array[9]  : \ram_array[8] ;
  assign _043_ = memory_address[0] ? \ram_array[11]  : \ram_array[10] ;
  assign _044_ = memory_address[0] ? \ram_array[13]  : \ram_array[12] ;
  assign _045_ = memory_address[0] ? \ram_array[15]  : \ram_array[14] ;
  assign _046_ = _005_ & _002_[7];
  assign _047_ = _020_ & _002_[7];
  assign _048_ = _021_ & _002_[7];
  assign _049_ = _023_ & _002_[7];
  assign _050_ = _024_ & _002_[7];
  assign _051_ = _025_ & _002_[7];
  assign _052_ = _026_ & _002_[7];
  assign _053_ = _007_ & _002_[7];
  assign _054_ = _009_ & _002_[7];
  assign _055_ = _011_ & _002_[7];
  assign _056_ = _013_ & _002_[7];
  assign _057_ = _014_ & _002_[7];
  assign _058_ = _015_ & _002_[7];
  assign _059_ = _016_ & _002_[7];
  assign _060_ = _018_ & _002_[7];
  assign _061_ = _019_ & _002_[7];
  assign _002_[7] = store ? (* full_case = 32'd1 *) (* src = "Source/ram.v:30.9-30.14|Source/ram.v:30.5-33.8" *) 1'h1 : 1'h0;
  assign _001_ = store ? (* full_case = 32'd1 *) (* src = "Source/ram.v:30.9-30.14|Source/ram.v:30.5-33.8" *) data_in : 8'hxx;
  assign _000_ = store ? (* full_case = 32'd1 *) (* src = "Source/ram.v:30.9-30.14|Source/ram.v:30.5-33.8" *) memory_address : 4'hx;
  (* src = "Source/ram.v:21.24-26.2" *)
  \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000001000  ram_buffer (
    .control_bit(output_enable_ram),
    .in_data(_031_),
    .out_data(data_out)
  );
  initial begin
    if (1'h1) begin
      $write("RAM initialized from %s\n", $unsigned(144'h536f757263652f6e65775f7365742e6d656d));
    end
  end
  assign _002_[6:0] = { _002_[7], _002_[7], _002_[7], _002_[7], _002_[7], _002_[7], _002_[7] };
endmodule

(* dynports =  1  *)
(* hdlname = "accumulator" *)
(* src = "Source/accumulator.v:1.1-44.10" *)
module \$paramod\accumulator\X=s32'00000000000000000000000000001000 (data_in, load_immediate_a, clk, load_a, output_enable, data_out_bus, data_out_alu);
  (* src = "Source/accumulator.v:16.14-16.23" *)
  wire [7:0] a_reg_out;
  (* src = "Source/accumulator.v:4.16-4.19" *)
  input clk;
  wire clk;
  (* src = "Source/accumulator.v:2.24-2.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/accumulator.v:8.24-8.36" *)
  output [7:0] data_out_alu;
  wire [7:0] data_out_alu;
  (* src = "Source/accumulator.v:7.25-7.37" *)
  output [7:0] data_out_bus;
  wire [7:0] data_out_bus;
  (* src = "Source/accumulator.v:5.16-5.22" *)
  input load_a;
  wire load_a;
  (* src = "Source/accumulator.v:3.16-3.32" *)
  input load_immediate_a;
  wire load_immediate_a;
  (* src = "Source/accumulator.v:6.16-6.29" *)
  input output_enable;
  wire output_enable;
  (* src = "Source/accumulator.v:14.6-14.24" *)
  wire write_enable_lower;
  (* src = "Source/accumulator.v:12.6-12.24" *)
  wire write_enable_upper;
  assign write_enable_lower = load_a | (* src = "Source/accumulator.v:14.27-14.52" *) load_immediate_a;
  (* src = "Source/accumulator.v:26.23-32.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  lower_nibble_a (
    .clear(1'h0),
    .clk(clk),
    .data_in(data_in[3:0]),
    .data_out(a_reg_out[3:0]),
    .write_enable(write_enable_lower)
  );
  (* src = "Source/accumulator.v:34.24-38.2" *)
  \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000001000  tristate_buffer (
    .control_bit(output_enable),
    .in_data(a_reg_out),
    .out_data(data_out_bus)
  );
  (* src = "Source/accumulator.v:18.23-24.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  upper_nibble_a (
    .clear(load_immediate_a),
    .clk(clk),
    .data_in(data_in[7:4]),
    .data_out(a_reg_out[7:4]),
    .write_enable(load_a)
  );
  assign data_out_alu = a_reg_out;
  assign write_enable_upper = load_a;
endmodule

(* dynports =  1  *)
(* hdlname = "alu" *)
(* src = "Source/alu.v:1.1-29.10" *)
module \$paramod\alu\N=s32'00000000000000000000000000001000 (output_alu, subtract_enable, data_in_a, data_in_b, data_out);
  (* src = "Source/alu.v:25.18-25.39" *)
  wire [7:0] _0_;
  (* src = "Source/alu.v:22.18-22.39" *)
  wire [7:0] _1_;
  (* src = "Source/alu.v:4.24-4.33" *)
  input [7:0] data_in_a;
  wire [7:0] data_in_a;
  (* src = "Source/alu.v:5.24-5.33" *)
  input [7:0] data_in_b;
  wire [7:0] data_in_b;
  (* src = "Source/alu.v:6.25-6.33" *)
  output [7:0] data_out;
  wire [7:0] data_out;
  (* src = "Source/alu.v:2.16-2.26" *)
  input output_alu;
  wire output_alu;
  (* src = "Source/alu.v:11.13-11.19" *)
  wire [7:0] result;
  (* src = "Source/alu.v:3.16-3.31" *)
  input subtract_enable;
  wire subtract_enable;
  assign _0_ = data_in_a + (* src = "Source/alu.v:25.18-25.39" *) data_in_b;
  assign result = subtract_enable ? (* full_case = 32'd1 *) (* src = "Source/alu.v:21.9-21.24|Source/alu.v:21.5-26.8" *) _1_ : _0_;
  assign _1_ = data_in_a - (* src = "Source/alu.v:22.18-22.39" *) data_in_b;
  (* src = "Source/alu.v:13.24-17.2" *)
  \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000001000  alu_buffer (
    .control_bit(output_alu),
    .in_data(result),
    .out_data(data_out)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "b_register" *)
(* src = "Source/b_register.v:2.1-35.10" *)
module \$paramod\b_register\N=s32'00000000000000000000000000001000 (data_in, clk, load_b, load_immediate_b, data_out);
  (* src = "Source/b_register.v:4.16-4.19" *)
  input clk;
  wire clk;
  (* src = "Source/b_register.v:3.24-3.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/b_register.v:7.25-7.33" *)
  output [7:0] data_out;
  wire [7:0] data_out;
  (* src = "Source/b_register.v:5.16-5.22" *)
  input load_b;
  wire load_b;
  (* src = "Source/b_register.v:6.16-6.32" *)
  input load_immediate_b;
  wire load_immediate_b;
  (* src = "Source/b_register.v:12.6-12.24" *)
  wire write_enable_lower;
  (* src = "Source/b_register.v:10.6-10.24" *)
  wire write_enable_upper;
  assign write_enable_lower = load_immediate_b | (* src = "Source/b_register.v:12.27-12.52" *) load_b;
  (* src = "Source/b_register.v:25.23-32.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  lower_nibble_b (
    .clear(1'h0),
    .clk(clk),
    .data_in(data_in[3:0]),
    .data_out(data_out[3:0]),
    .write_enable(write_enable_lower)
  );
  (* src = "Source/b_register.v:16.23-23.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  upper_nibble_b (
    .clear(load_immediate_b),
    .clk(clk),
    .data_in(data_in[7:4]),
    .data_out(data_out[7:4]),
    .write_enable(load_b)
  );
  assign write_enable_upper = load_b;
endmodule

(* dynports =  1  *)
(* hdlname = "instruction_register" *)
(* src = "Source/instruction_register.v:1.1-39.10" *)
module \$paramod\instruction_register\N=s32'00000000000000000000000000001000 (data_in, clk, output_enable_ir, load_ir, clear_ir, bus_output, controller_output);
  (* src = "Source/instruction_register.v:12.18-12.30" *)
  wire [3:0] buffer_input;
  (* src = "Source/instruction_register.v:7.29-7.39" *)
  output [3:0] bus_output;
  wire [3:0] bus_output;
  (* src = "Source/instruction_register.v:6.16-6.24" *)
  input clear_ir;
  wire clear_ir;
  (* src = "Source/instruction_register.v:3.16-3.19" *)
  input clk;
  wire clk;
  (* src = "Source/instruction_register.v:8.29-8.46" *)
  output [3:0] controller_output;
  wire [3:0] controller_output;
  (* src = "Source/instruction_register.v:2.24-2.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/instruction_register.v:5.16-5.23" *)
  input load_ir;
  wire load_ir;
  (* src = "Source/instruction_register.v:4.16-4.32" *)
  input output_enable_ir;
  wire output_enable_ir;
  (* src = "Source/instruction_register.v:32.26-37.2" *)
  \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000000100  bus_buffer (
    .control_bit(output_enable_ir),
    .in_data(buffer_input),
    .out_data(bus_output)
  );
  (* src = "Source/instruction_register.v:23.23-29.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  lower_nibble_ir (
    .clear(clear_ir),
    .clk(clk),
    .data_in(data_in[3:0]),
    .data_out(buffer_input),
    .write_enable(load_ir)
  );
  (* src = "Source/instruction_register.v:14.23-21.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  upper_nibble_ir (
    .clear(clear_ir),
    .clk(clk),
    .data_in(data_in[7:4]),
    .data_out(controller_output),
    .write_enable(load_ir)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "mar" *)
(* src = "Source/mar.v:1.1-16.10" *)
module \$paramod\mar\N=s32'00000000000000000000000000000100 (load_mar, clk, data_in, data_out);
  (* src = "Source/mar.v:3.16-3.19" *)
  input clk;
  wire clk;
  (* src = "Source/mar.v:4.24-4.31" *)
  input [3:0] data_in;
  wire [3:0] data_in;
  (* src = "Source/mar.v:5.25-5.33" *)
  output [3:0] data_out;
  wire [3:0] data_out;
  (* src = "Source/mar.v:2.16-2.24" *)
  input load_mar;
  wire load_mar;
  (* src = "Source/mar.v:8.21-14.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000000100  mar_register (
    .clear(1'h0),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out),
    .write_enable(load_mar)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "n_bit_register" *)
(* src = "Source/n_bit_register.v:1.1-17.10" *)
module \$paramod\n_bit_register\N=s32'00000000000000000000000000000100 (data_in, write_enable, clk, clear, data_out);
  (* src = "Source/n_bit_register.v:5.16-5.21" *)
  input clear;
  wire clear;
  (* src = "Source/n_bit_register.v:4.16-4.19" *)
  input clk;
  wire clk;
  (* src = "Source/n_bit_register.v:2.24-2.31" *)
  input [3:0] data_in;
  wire [3:0] data_in;
  (* src = "Source/n_bit_register.v:6.24-6.32" *)
  output [3:0] data_out;
  reg [3:0] data_out;
  (* src = "Source/n_bit_register.v:3.16-3.28" *)
  input write_enable;
  wire write_enable;
  (* src = "Source/n_bit_register.v:9.5-16.8" *)
  always @(posedge clk)
    if (clear) data_out <= 4'h0;
    else if (write_enable) data_out <= data_in;
endmodule

(* dynports =  1  *)
(* hdlname = "n_bit_register" *)
(* src = "Source/n_bit_register.v:1.1-17.10" *)
module \$paramod\n_bit_register\N=s32'00000000000000000000000000001000 (data_in, write_enable, clk, clear, data_out);
  (* src = "Source/n_bit_register.v:5.16-5.21" *)
  input clear;
  wire clear;
  (* src = "Source/n_bit_register.v:4.16-4.19" *)
  input clk;
  wire clk;
  (* src = "Source/n_bit_register.v:2.24-2.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/n_bit_register.v:6.24-6.32" *)
  output [7:0] data_out;
  reg [7:0] data_out;
  (* src = "Source/n_bit_register.v:3.16-3.28" *)
  input write_enable;
  wire write_enable;
  (* src = "Source/n_bit_register.v:9.5-16.8" *)
  always @(posedge clk)
    if (clear) data_out <= 8'h00;
    else if (write_enable) data_out <= data_in;
endmodule

(* dynports =  1  *)
(* hdlname = "n_tristate_buffer" *)
(* src = "Source/n_tristate_buffer.v:1.1-16.10" *)
module \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000000100 (control_bit, in_data, out_data);
  (* src = "Source/n_tristate_buffer.v:2.16-2.27" *)
  input control_bit;
  wire control_bit;
  (* src = "Source/n_tristate_buffer.v:3.24-3.31" *)
  input [3:0] in_data;
  wire [3:0] in_data;
  (* src = "Source/n_tristate_buffer.v:4.25-4.33" *)
  output [3:0] out_data;
  wire [3:0] out_data;
  assign out_data[0] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[0] : 1'hz;
  assign out_data[1] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[1] : 1'hz;
  assign out_data[2] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[2] : 1'hz;
  assign out_data[3] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[3] : 1'hz;
endmodule

(* dynports =  1  *)
(* hdlname = "n_tristate_buffer" *)
(* src = "Source/n_tristate_buffer.v:1.1-16.10" *)
module \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000001000 (control_bit, in_data, out_data);
  (* src = "Source/n_tristate_buffer.v:2.16-2.27" *)
  input control_bit;
  wire control_bit;
  (* src = "Source/n_tristate_buffer.v:3.24-3.31" *)
  input [7:0] in_data;
  wire [7:0] in_data;
  (* src = "Source/n_tristate_buffer.v:4.25-4.33" *)
  output [7:0] out_data;
  wire [7:0] out_data;
  assign out_data[0] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[0] : 1'hz;
  assign out_data[1] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[1] : 1'hz;
  assign out_data[2] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[2] : 1'hz;
  assign out_data[3] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[3] : 1'hz;
  assign out_data[4] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[4] : 1'hz;
  assign out_data[5] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[5] : 1'hz;
  assign out_data[6] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[6] : 1'hz;
  assign out_data[7] = control_bit ? (* src = "Source/n_tristate_buffer.v:12.30-12.61" *) in_data[7] : 1'hz;
endmodule

(* dynports =  1  *)
(* hdlname = "output_register" *)
(* src = "Source/output_register.v:1.1-16.10" *)
module \$paramod\output_register\N=s32'00000000000000000000000000001000 (data_in, clk, write_enable_output, data_out);
  (* src = "Source/output_register.v:3.16-3.19" *)
  input clk;
  wire clk;
  (* src = "Source/output_register.v:2.24-2.31" *)
  input [7:0] data_in;
  wire [7:0] data_in;
  (* src = "Source/output_register.v:5.20-5.28" *)
  output [7:0] data_out;
  wire [7:0] data_out;
  (* src = "Source/output_register.v:4.16-4.35" *)
  input write_enable_output;
  wire write_enable_output;
  (* src = "Source/output_register.v:8.21-15.2" *)
  \$paramod\n_bit_register\N=s32'00000000000000000000000000001000  output_reg (
    .clear(1'h0),
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out),
    .write_enable(write_enable_output)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "program_counter" *)
(* src = "Source/program_counter.v:1.1-38.10" *)
module \$paramod\program_counter\N=s32'00000000000000000000000000000100 (clk, jump, data_in, output_enable, count, reset_counter, data_out);
  (* src = "Source/program_counter.v:24.1-37.4" *)
  wire [3:0] _00_;
  (* src = "Source/program_counter.v:26.29-26.49" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _01_;
  wire _02_;
  wire [3:0] _03_;
  wire [3:0] _04_;
  (* src = "Source/program_counter.v:3.16-3.19" *)
  input clk;
  wire clk;
  (* src = "Source/program_counter.v:7.16-7.21" *)
  input count;
  wire count;
  (* src = "Source/program_counter.v:13.13-13.29" *)
  reg [3:0] counter_contents;
  (* src = "Source/program_counter.v:5.24-5.31" *)
  input [3:0] data_in;
  wire [3:0] data_in;
  (* src = "Source/program_counter.v:9.25-9.33" *)
  output [3:0] data_out;
  wire [3:0] data_out;
  (* src = "Source/program_counter.v:4.16-4.20" *)
  input jump;
  wire jump;
  (* src = "Source/program_counter.v:6.16-6.29" *)
  input output_enable;
  wire output_enable;
  (* src = "Source/program_counter.v:8.16-8.29" *)
  input reset_counter;
  wire reset_counter;
  assign _01_ = counter_contents + (* src = "Source/program_counter.v:26.29-26.49" *) 32'd1;
  (* src = "Source/program_counter.v:24.1-37.4" *)
  always @(negedge clk)
    if (_02_) counter_contents <= _00_;
  assign _02_ = | { jump, count, reset_counter };
  assign _03_ = jump ? (* src = "Source/program_counter.v:33.14-33.18|Source/program_counter.v:33.10-35.8" *) data_in : 4'hx;
  assign _04_ = reset_counter ? (* full_case = 32'd1 *) (* src = "Source/program_counter.v:29.14-29.27|Source/program_counter.v:29.10-35.8" *) 4'h0 : _03_;
  assign _00_ = count ? (* full_case = 32'd1 *) (* src = "Source/program_counter.v:25.9-25.14|Source/program_counter.v:25.5-35.8" *) _01_[3:0] : _04_;
  (* src = "Source/program_counter.v:16.24-20.2" *)
  \$paramod\n_tristate_buffer\N=s32'00000000000000000000000000000100  tristate_buffer (
    .control_bit(output_enable),
    .in_data(counter_contents),
    .out_data(data_out)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "ring_counter" *)
(* src = "Source/ring_counter.v:1.1-20.10" *)
module \$paramod\ring_counter\N=s32'00000000000000000000000000000110 (reset_ring, clk, count_out);
  (* src = "Source/ring_counter.v:3.16-3.19" *)
  input clk;
  wire clk;
  (* src = "Source/ring_counter.v:4.24-4.33" *)
  output [5:0] count_out;
  reg [5:0] count_out;
  (* src = "Source/ring_counter.v:2.16-2.26" *)
  input reset_ring;
  wire reset_ring;
  (* src = "Source/ring_counter.v:12.1-19.4" *)
  always @(negedge clk)
    if (reset_ring) count_out <= 6'h20;
    else count_out <= { count_out[0], count_out[5:1] };
endmodule

(* keep =  1  *)
(* dynports =  1  *)
(* top =  1  *)
(* src = "Source/NSC8.v:1.1-142.10" *)
module NSC8(clk, reset_counter, reset_ring, clear_ir, output_contents);
  (* src = "Source/NSC8.v:18.14-18.22" *)
  wire [7:0] a_to_alu;
  (* src = "Source/NSC8.v:21.14-21.22" *)
  wire [7:0] b_to_alu;
  (* src = "Source/NSC8.v:5.16-5.24" *)
  input clear_ir;
  wire clear_ir;
  (* src = "Source/NSC8.v:2.16-2.19" *)
  input clk;
  wire clk;
  (* src = "Source/NSC8.v:40.8-40.20" *)
  wire clk_decode_w;
  (* src = "Source/NSC8.v:24.8-24.15" *)
  wire count_w;
  (* src = "Source/NSC8.v:9.14-9.22" *)
  wire [7:0] data_bus;
  (* src = "Source/NSC8.v:15.18-15.34" *)
  wire [3:0] ir_to_controller;
  (* src = "Source/NSC8.v:39.8-39.14" *)
  wire jump_w;
  (* src = "Source/NSC8.v:30.8-30.16" *)
  wire load_a_w;
  (* src = "Source/NSC8.v:34.8-34.16" *)
  wire load_b_w;
  (* src = "Source/NSC8.v:36.8-36.26" *)
  wire load_immediate_a_w;
  (* src = "Source/NSC8.v:37.8-37.26" *)
  wire load_immediate_b_w;
  (* src = "Source/NSC8.v:28.8-28.17" *)
  wire load_ir_w;
  (* src = "Source/NSC8.v:26.8-26.18" *)
  wire load_mar_w;
  (* src = "Source/NSC8.v:12.18-12.28" *)
  wire [3:0] mar_to_ram;
  (* src = "Source/NSC8.v:33.8-33.20" *)
  wire output_alu_w;
  (* src = "Source/NSC8.v:6.25-6.40" *)
  output [7:0] output_contents;
  wire [7:0] output_contents;
  (* src = "Source/NSC8.v:31.8-31.25" *)
  wire output_enable_a_w;
  (* src = "Source/NSC8.v:29.8-29.26" *)
  wire output_enable_ir_w;
  (* src = "Source/NSC8.v:27.8-27.27" *)
  wire output_enable_ram_w;
  (* src = "Source/NSC8.v:25.8-25.26" *)
  wire pc_output_enable_w;
  (* src = "Source/NSC8.v:3.16-3.29" *)
  input reset_counter;
  wire reset_counter;
  (* src = "Source/NSC8.v:4.16-4.26" *)
  input reset_ring;
  wire reset_ring;
  (* src = "Source/NSC8.v:38.8-38.15" *)
  wire store_w;
  (* src = "Source/NSC8.v:32.8-32.25" *)
  wire subtract_enable_w;
  (* src = "Source/NSC8.v:35.8-35.29" *)
  wire write_enable_output_w;
  (* src = "Source/NSC8.v:108.18-116.2" *)
  \$paramod\accumulator\X=s32'00000000000000000000000000001000  a_reg (
    .clk(clk_decode_w),
    .data_in(data_bus),
    .data_out_alu(a_to_alu),
    .data_out_bus(data_bus),
    .load_a(load_a_w),
    .load_immediate_a(load_immediate_a_w),
    .output_enable(output_enable_a_w)
  );
  (* src = "Source/NSC8.v:118.10-124.2" *)
  \$paramod\alu\N=s32'00000000000000000000000000001000  alu_reg (
    .data_in_a(a_to_alu),
    .data_in_b(b_to_alu),
    .data_out(data_bus),
    .output_alu(output_alu_w),
    .subtract_enable(subtract_enable_w)
  );
  (* src = "Source/NSC8.v:126.17-132.2" *)
  \$paramod\b_register\N=s32'00000000000000000000000000001000  b_reg (
    .clk(clk_decode_w),
    .data_in(data_bus),
    .data_out(b_to_alu),
    .load_b(load_b_w),
    .load_immediate_b(load_immediate_b_w)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "Source/NSC8.v:42.12-64.2" *)
  controller ctrl (
    .base_clk(clk),
    .clk_decode(clk_decode_w),
    .count(count_w),
    .instruction(ir_to_controller),
    .jump(jump_w),
    .load_a(load_a_w),
    .load_b(load_b_w),
    .load_immediate_a(load_immediate_a_w),
    .load_immediate_b(load_immediate_b_w),
    .load_ir(load_ir_w),
    .load_mar(load_mar_w),
    .output_alu(output_alu_w),
    .output_enable_a(output_enable_a_w),
    .output_enable_ir(output_enable_ir_w),
    .output_enable_ram(output_enable_ram_w),
    .pc_output_enable(pc_output_enable_w),
    .reset_ring(reset_ring),
    .store(store_w),
    .subtract_enable(subtract_enable_w),
    .write_enable_output(write_enable_output_w)
  );
  (* src = "Source/NSC8.v:98.27-106.2" *)
  \$paramod\instruction_register\N=s32'00000000000000000000000000001000  ir (
    .bus_output(data_bus[3:0]),
    .clear_ir(clear_ir),
    .clk(clk_decode_w),
    .controller_output(ir_to_controller),
    .data_in(data_bus),
    .load_ir(load_ir_w),
    .output_enable_ir(output_enable_ir_w)
  );
  (* src = "Source/NSC8.v:78.12-84.2" *)
  \$paramod\mar\N=s32'00000000000000000000000000000100  mar0 (
    .clk(clk_decode_w),
    .data_in(data_bus[3:0]),
    .data_out(mar_to_ram),
    .load_mar(load_mar_w)
  );
  (* src = "Source/NSC8.v:134.22-140.2" *)
  \$paramod\output_register\N=s32'00000000000000000000000000001000  out_reg (
    .clk(clk_decode_w),
    .data_in(data_bus),
    .data_out(output_contents),
    .write_enable_output(write_enable_output_w)
  );
  (* src = "Source/NSC8.v:67.24-76.2" *)
  \$paramod\program_counter\N=s32'00000000000000000000000000000100  pc (
    .clk(clk_decode_w),
    .count(count_w),
    .data_in(data_bus[3:0]),
    .data_out(data_bus[3:0]),
    .jump(jump_w),
    .output_enable(pc_output_enable_w),
    .reset_counter(reset_counter)
  );
  (* src = "Source/NSC8.v:88.48-95.2" *)
  \$paramod$5c5748fb6a4b04a20c8df86f548186a89ec62988\ram  ram0 (
    .clk(clk_decode_w),
    .data_in(data_bus),
    .data_out(data_bus),
    .memory_address(mar_to_ram),
    .output_enable_ram(output_enable_ram_w),
    .store(store_w)
  );
endmodule

(* src = "Source/controller.v:1.1-148.10" *)
module controller(instruction, base_clk, reset_ring, count, pc_output_enable, load_mar, output_enable_ram, load_ir, output_enable_ir, load_a, output_enable_a, subtract_enable, output_alu, load_b, write_enable_output, load_immediate_a, load_immediate_b, store, jump, clk_decode);
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _00_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _01_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _02_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _03_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _04_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _05_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _06_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _07_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _08_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _09_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _10_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _11_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _12_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _13_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _14_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _15_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _16_;
  (* src = "Source/controller.v:52.1-147.4" *)
  wire _17_;
  (* src = "Source/controller.v:111.9-111.19" *)
  wire _18_;
  (* src = "Source/controller.v:111.9-111.26" *)
  wire _19_;
  (* src = "Source/controller.v:115.9-115.19" *)
  wire _20_;
  (* src = "Source/controller.v:128.9-128.21" *)
  wire _21_;
  (* src = "Source/controller.v:128.9-128.28" *)
  wire _22_;
  (* src = "Source/controller.v:88.9-88.34" *)
  wire _23_;
  (* src = "Source/controller.v:88.9-88.41" *)
  wire _24_;
  (* src = "Source/controller.v:88.9-88.49" *)
  wire _25_;
  (* src = "Source/controller.v:88.9-88.57" *)
  wire _26_;
  (* src = "Source/controller.v:88.9-88.65" *)
  wire _27_;
  (* src = "Source/controller.v:91.9-91.19" *)
  wire _28_;
  (* src = "Source/controller.v:91.9-91.26" *)
  wire _29_;
  (* src = "Source/controller.v:91.9-91.33" *)
  wire _30_;
  (* src = "Source/controller.v:37.32-37.36" *)
  wire _31_;
  (* src = "Source/controller.v:27.6-27.9" *)
  wire ADD;
  (* src = "Source/controller.v:31.6-31.10" *)
  wire ADDI;
  (* src = "Source/controller.v:35.6-35.9" *)
  wire HLT;
  (* src = "Source/controller.v:33.6-33.10" *)
  wire JUMP;
  (* src = "Source/controller.v:26.6-26.9" *)
  wire LDA;
  (* src = "Source/controller.v:29.6-29.10" *)
  wire LDAI;
  (* src = "Source/controller.v:34.6-34.9" *)
  wire OUT;
  (* src = "Source/controller.v:30.6-30.9" *)
  wire STA;
  (* src = "Source/controller.v:28.6-28.9" *)
  wire SUB;
  (* src = "Source/controller.v:32.6-32.10" *)
  wire SUBI;
  (* src = "Source/controller.v:3.16-3.24" *)
  input base_clk;
  wire base_clk;
  (* src = "Source/controller.v:21.17-21.27" *)
  output clk_decode;
  wire clk_decode;
  (* src = "Source/controller.v:5.16-5.21" *)
  output count;
  wire count;
  (* src = "Source/controller.v:2.22-2.33" *)
  input [3:0] instruction;
  wire [3:0] instruction;
  (* src = "Source/controller.v:20.16-20.20" *)
  output jump;
  wire jump;
  (* src = "Source/controller.v:11.16-11.22" *)
  output load_a;
  wire load_a;
  (* src = "Source/controller.v:15.16-15.22" *)
  output load_b;
  wire load_b;
  (* src = "Source/controller.v:17.16-17.32" *)
  output load_immediate_a;
  wire load_immediate_a;
  (* src = "Source/controller.v:18.16-18.32" *)
  output load_immediate_b;
  wire load_immediate_b;
  (* src = "Source/controller.v:9.16-9.23" *)
  output load_ir;
  wire load_ir;
  (* src = "Source/controller.v:7.16-7.24" *)
  output load_mar;
  wire load_mar;
  (* src = "Source/controller.v:14.16-14.26" *)
  output output_alu;
  wire output_alu;
  (* src = "Source/controller.v:37.6-37.18" *)
  wire output_clock;
  (* src = "Source/controller.v:12.16-12.31" *)
  output output_enable_a;
  wire output_enable_a;
  (* src = "Source/controller.v:10.16-10.32" *)
  output output_enable_ir;
  wire output_enable_ir;
  (* src = "Source/controller.v:8.16-8.33" *)
  output output_enable_ram;
  wire output_enable_ram;
  (* src = "Source/controller.v:6.16-6.32" *)
  output pc_output_enable;
  wire pc_output_enable;
  (* src = "Source/controller.v:4.16-4.26" *)
  input reset_ring;
  wire reset_ring;
  (* src = "Source/controller.v:19.16-19.21" *)
  output store;
  wire store;
  (* src = "Source/controller.v:13.16-13.31" *)
  output subtract_enable;
  wire subtract_enable;
  (* src = "Source/controller.v:39.12-39.18" *)
  wire [5:0] timing;
  (* src = "Source/controller.v:16.16-16.35" *)
  output write_enable_output;
  wire write_enable_output;
  assign output_clock = base_clk & (* src = "Source/controller.v:37.21-37.36" *) _31_;
  assign LDA = ! (* src = "Source/controller.v:26.13-26.35" *) instruction;
  assign ADD = instruction == (* src = "Source/controller.v:27.13-27.35" *) 4'h1;
  assign SUB = instruction == (* src = "Source/controller.v:28.13-28.35" *) 4'h2;
  assign LDAI = instruction == (* src = "Source/controller.v:29.14-29.36" *) 4'h3;
  assign STA = instruction == (* src = "Source/controller.v:30.13-30.35" *) 4'h4;
  assign ADDI = instruction == (* src = "Source/controller.v:31.14-31.36" *) 4'h5;
  assign SUBI = instruction == (* src = "Source/controller.v:32.14-32.36" *) 4'h6;
  assign JUMP = instruction == (* src = "Source/controller.v:33.14-33.36" *) 4'h7;
  assign OUT = instruction == (* src = "Source/controller.v:34.13-34.35" *) 4'he;
  assign HLT = instruction == (* src = "Source/controller.v:35.13-35.35" *) 4'hf;
  assign _18_ = LDA || (* src = "Source/controller.v:111.9-111.19" *) ADD;
  assign _19_ = _18_ || (* src = "Source/controller.v:111.9-111.26" *) SUB;
  assign _22_ = _21_ || (* src = "Source/controller.v:128.9-128.28" *) LDA;
  assign _21_ = ADDI || (* src = "Source/controller.v:132.9-132.21" *) SUBI;
  assign _20_ = ADD || (* src = "Source/controller.v:142.8-142.18" *) SUB;
  assign _23_ = _19_ || (* src = "Source/controller.v:88.9-88.34" *) LDAI;
  assign _24_ = _23_ || (* src = "Source/controller.v:88.9-88.41" *) STA;
  assign _25_ = _24_ || (* src = "Source/controller.v:88.9-88.49" *) ADDI;
  assign _26_ = _25_ || (* src = "Source/controller.v:88.9-88.57" *) SUBI;
  assign _27_ = _26_ || (* src = "Source/controller.v:88.9-88.65" *) JUMP;
  assign _28_ = LDA || (* src = "Source/controller.v:91.9-91.19" *) STA;
  assign _29_ = _28_ || (* src = "Source/controller.v:91.9-91.26" *) ADD;
  assign _30_ = _29_ || (* src = "Source/controller.v:91.9-91.33" *) SUB;
  assign _31_ = ~ (* src = "Source/controller.v:37.32-37.36" *) HLT;
  assign _14_ = _20_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:142.8-142.18|Source/controller.v:142.5-145.8" *) 1'h1 : _00_;
  assign _15_ = _20_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:142.8-142.18|Source/controller.v:142.5-145.8" *) 1'h1 : _01_;
  assign _17_ = SUB ? (* full_case = 32'd1 *) (* src = "Source/controller.v:139.9-139.12|Source/controller.v:139.5-141.8" *) 1'h1 : _02_;
  assign output_alu = timing[0] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:138.5-138.14|Source/controller.v:138.1-146.4" *) _15_ : _01_;
  assign load_a = timing[0] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:138.5-138.14|Source/controller.v:138.1-146.4" *) _14_ : _00_;
  assign subtract_enable = timing[0] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:138.5-138.14|Source/controller.v:138.1-146.4" *) _17_ : _02_;
  assign _07_ = _21_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:132.9-132.21|Source/controller.v:132.5-134.8" *) 1'h1 : 1'h0;
  assign _04_ = _22_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:128.9-128.28|Source/controller.v:128.5-130.8" *) 1'h1 : 1'h0;
  assign _11_ = SUBI ? (* full_case = 32'd1 *) (* src = "Source/controller.v:124.9-124.13|Source/controller.v:124.5-126.8" *) 1'h1 : 1'h0;
  assign _10_ = STA ? (* full_case = 32'd1 *) (* src = "Source/controller.v:119.9-119.12|Source/controller.v:119.5-122.8" *) 1'h1 : 1'h0;
  assign _16_ = STA ? (* full_case = 32'd1 *) (* src = "Source/controller.v:119.9-119.12|Source/controller.v:119.5-122.8" *) 1'h1 : write_enable_output;
  assign _05_ = _20_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:115.9-115.19|Source/controller.v:115.5-117.8" *) 1'h1 : 1'h0;
  assign _13_ = _19_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:111.9-111.26|Source/controller.v:111.5-114.8" *) 1'h1 : load_ir;
  assign _01_ = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _07_ : 1'h0;
  assign _00_ = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _04_ : 1'h0;
  assign _02_ = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _11_ : 1'h0;
  assign store = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _10_ : 1'h0;
  assign output_enable_a = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _16_ : write_enable_output;
  assign load_b = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _05_ : 1'h0;
  assign output_enable_ram = timing[1] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:110.5-110.14|Source/controller.v:110.1-135.4" *) _13_ : load_ir;
  assign _08_ = OUT ? (* full_case = 32'd1 *) (* src = "Source/controller.v:103.9-103.12|Source/controller.v:103.5-106.8" *) 1'h1 : 1'h0;
  assign _03_ = JUMP ? (* full_case = 32'd1 *) (* src = "Source/controller.v:100.9-100.13|Source/controller.v:100.5-102.8" *) 1'h1 : 1'h0;
  assign _06_ = LDAI ? (* full_case = 32'd1 *) (* src = "Source/controller.v:94.9-94.13|Source/controller.v:94.5-96.8" *) 1'h1 : 1'h0;
  assign _12_ = _30_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:91.9-91.33|Source/controller.v:91.5-93.8" *) 1'h1 : pc_output_enable;
  assign _09_ = _27_ ? (* full_case = 32'd1 *) (* src = "Source/controller.v:88.9-88.65|Source/controller.v:88.5-90.8" *) 1'h1 : 1'h0;
  assign write_enable_output = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _08_ : 1'h0;
  assign jump = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _03_ : 1'h0;
  assign load_immediate_b = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _07_ : 1'h0;
  assign load_immediate_a = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _06_ : 1'h0;
  assign load_mar = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _12_ : pc_output_enable;
  assign output_enable_ir = timing[2] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:87.5-87.14|Source/controller.v:87.1-107.4" *) _09_ : 1'h0;
  assign load_ir = timing[3] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:81.5-81.14|Source/controller.v:81.1-84.4" *) 1'h1 : 1'h0;
  assign count = timing[4] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:77.5-77.14|Source/controller.v:77.1-79.4" *) 1'h1 : 1'h0;
  assign pc_output_enable = timing[5] ? (* full_case = 32'd1 *) (* src = "Source/controller.v:72.5-72.14|Source/controller.v:72.1-75.4" *) 1'h1 : 1'h0;
  (* src = "Source/controller.v:43.19-48.2" *)
  \$paramod\ring_counter\N=s32'00000000000000000000000000000110  ring_counter_controller (
    .clk(output_clock),
    .count_out(timing),
    .reset_ring(reset_ring)
  );
  assign clk_decode = output_clock;
endmodule
